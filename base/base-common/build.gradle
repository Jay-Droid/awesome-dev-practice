apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    //给 Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "${project.name.toLowerCase().replaceAll("-", "_")}_"

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        //Instrumentation Test class
        testInstrumentationRunner rootProject.ext.androidJUnitRunner
        //consumerProguardFiles  打包库Module发布AAR时配置的混淆文件，如果没有配置这个属性，在其他项目引用AndroidLib 项目且开启minifyEnabled时或许会报错，因为主项目不会自主引入依赖库的ProguardFile文件，必须在主项目中配置consumerProguardFiles节点，这样主项目就会引入依赖库的gradle文件中的（默认为release变体）下ProguardFile。
        consumerProguardFiles 'consumer-rules.pro'

        //Arouter
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes.each {
        Properties props
        if (it.name == "debug") {
            props = rootProject.ext.environment['debugEnvironmentProps']
        } else {
            props = rootProject.ext.environment['liveEnvironmentProps']
        }
        it.buildConfigField("String", "BASE_URL", String.format(Locale.getDefault(), "\"%s\"", props["base_url"]))

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    //基础功能组件
    api project(path: ':lib:lib-common')

    api fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.kotlinStdlibJdk8
    api rootProject.ext.appcompat
    api rootProject.ext.coreKtx
    api rootProject.ext.constraintLayout
    testImplementation rootProject.ext.junit
    androidTestImplementation rootProject.ext.junitX
    androidTestImplementation rootProject.ext.espressoCore

    //persistentcookiejar
    api rootProject.ext.persistentcookiejar
    //statusbarUtil
    api rootProject.ext.statusbarUtil
    //eventbus
    api rootProject.ext.eventbus
    //Arouter
    api rootProject.ext.arouterApi
    //需要所有使用 ARouter 的 model 都添加依赖
    kapt rootProject.ext.arouterCompiler

}

